import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import KFold, RandomizedSearchCV, train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, classification_report, roc_curve, auc
from sklearn.preprocessing import StandardScaler, label_binarize
from sklearn.pipeline import Pipeline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.pipeline import Pipeline

# Step 1: Read the dataset
df = pd.read_csv('Cleaned_BigMartWaste.csv')

# Step 2: Select features and target
selected_features = ['Weight', 'ProductVisibility', 'MRP']  # Selected features
X = df[selected_features]  # Features
y = df['ProductType']  # Target

# Step 3: Split the data into a training+validation set (20%) and a test set (20%)
X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the pipelineA
pipeline = Pipeline([
    ('scaler', StandardScaler()),  # Scale features
    ('rf', RandomForestClassifier(class_weight='balanced', random_state=42))  # Random Forest classifier
])

# Step 4: Scale the features outside of the pipeline to save computation time
scaler = StandardScaler()
X_train_val = scaler.fit_transform(X_train_val)
X_test = scaler.transform(X_test)


# Step 5: Define a simplified parameter grid for RandomizedSearchCV
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5],
    'min_samples_leaf': [1, 2],
    'max_features': ['sqrt', 'log2'],
    'bootstrap': [True, False]
}

# Step 6: Use RandomizedSearchCV for hyperparameter tuning
rf = RandomForestClassifier(class_weight='balanced', random_state=42)
random_search = RandomizedSearchCV(
    estimator=rf,
    param_distributions=param_grid,
    n_iter=10,  # Number of parameter settings to sample
    cv=3,  # Cross-validation with 3 folds
    n_jobs=-1,  # Use all available cores
    verbose=1,
    random_state=42
)
random_search.fit(X_train_val, y_train_val)

# Step 7: Display the best parameters and best score
print("Best parameters from Randomized Search:", random_search.best_params_)
print("Best cross-validation score:", random_search.best_score_)

# Step 8: Evaluate the best model using 5-Fold Cross-Validation
best_model = random_search.best_estimator_  # Extract the best model
kf = KFold(n_splits=5, shuffle=True, random_state=42)
scores = []

for i, (train_index, val_index) in enumerate(kf.split(X_train_val)):
    X_train, X_val = X_train_val[train_index], X_train_val[val_index]
    y_train, y_val = y_train_val.iloc[train_index], y_train_val.iloc[val_index]

    # Fit the model on the current fold
    best_model.fit(X_train, y_train)

    # Predict on the validation set
    y_pred_val = best_model.predict(X_val)

    # Calculate accuracy on the validation set
    accuracy = accuracy_score(y_val, y_pred_val)
    scores.append(accuracy)

    # Print results for this fold
    print(f"\nFold {i + 1} Results (Validation Set):")
    print(f"Accuracy: {accuracy:.2f}")
    print("Classification Report:")
    print(classification_report(y_val, y_pred_val))

# Step 9: Calculate and display overall performance
print("\nOverall Cross-Validation Results on Validation Set:")
print(f"Mean Accuracy: {np.mean(scores):.2f}")
print(f"Standard Deviation of Accuracy: {np.std(scores):.2f}")

# Step 10: Evaluate the best model on the test set
y_pred_test = best_model.predict(X_test)
test_accuracy = accuracy_score(y_test, y_pred_test)

# Performance metrics on the test set
test_precision = precision_score(y_test, y_pred_test, average='weighted')
test_recall = recall_score(y_test, y_pred_test, average='weighted')
test_f1 = f1_score(y_test, y_pred_test, average='weighted')

print("\nTest Set Performance:")
print(f"Test Accuracy: {test_accuracy:.2f}")
print(f"Test Precision: {test_precision:.2f}")
print(f"Test Recall: {test_recall:.2f}")
print(f"Test F1-Score: {test_f1:.2f}")
print("Classification Report on Test Set:")
print(classification_report(y_test, y_pred_test))

# Additional Metrics: Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred_test)
print("\nConfusion Matrix on Test Set:")
print(conf_matrix)

# Visualize Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=df['ProductType'].unique(), yticklabels=df['ProductType'].unique())
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()


# ROC Curve and AUC-ROC
y_prob_test = best_model.predict_proba(X_test)[:, 1]  # Get probabilities for the positive class
fpr, tpr, thresholds = roc_curve(y_test, y_prob_test, pos_label=best_model.classes_[1])
roc_auc = auc(fpr, tpr)

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()



